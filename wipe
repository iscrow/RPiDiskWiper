#!/bin/bash

LOGFILE="/tmp/wipe.log"
SPEED_LOGFILE="/tmp/wipe_speed.log"
MAX_LOGFILE_SIZE=$((10*1024*1024))

dev=$1
disk="/dev/$dev"
mntpath="/mnt/$(basename "$disk")1"
statedir="/tmp"
statefile="$statedir/$dev"
state=""

rpiled='/sys/class/leds/led0'
odroidled='/sys/class/leds/blue:heartbeat'
fakeled='/tmp/fakeled'

if [ -d $rpiled ] && [ -f $rpiled/trigger ] && [ -f $rpiled/brightness ]; then
	led=$rpiled
elif [ -d $odroidled ] && [ -f $odroidled/trigger ] && [ -f $odroidled/brightness ]; then
	led=$odroidled
else
	mkdir $fakeled
	led=$fakeled
fi

DEBUG=1		# Debug enabled. Log to $LOGFILE
#DEBUG=		# Debug disabled. Do not log.

if [ "$DEBUG" ]; then
#	exec >> $LOGFILE		# This causes all stdout of the script to be sent to the logfile
	exec 2>&1
fi

function ledtrigger() {
	# Default led0 (Green: Status) trigger: mmc0
	echo $1 > $led/trigger
}

function pulse() {
	[ "0$2" -gt 0 ] && flashes=$2 || flashes=1
	for i in $(seq $flashes); do
		echo 255 > $led/brightness
		sleep $1
		echo   0 > $led/brightness
		[ $flashes -gt 1 ] && sleep $1
	done
}

# Log to the $LOGFILE is DEBUG is enabled. Example: log "my message"
function log() {
	[ "$DEBUG" ] && echo $(date) :: $disk :: $* >> $LOGFILE
}

function speed_log() {
	[ "$DEBUG" ] && echo $(date) :: $disk :: $* >> $SPEED_LOGFILE
}

# Log to $LOGFILE lines read on stdin instead of passed as parameters
# Expample: echo "my message" | inlog
function inlog() {
	while read -r line; do 
		[ "$DEBUG" ] && speed_log "$line";
	done
}

# Create/remove the appropriate state flags in /tmp that allow multiple instances of this script
# wiping disks in parallel to agree on what the LEDs should be doing.
function setstate() {
	state=$1
	echo $state > $statefile
}

# Get a list of state files
function wiperlist() {
	(ls $statedir/sd? | xargs -L1 basename) 2>/dev/null
}

# Get a list of state files with particular state
# statelist wiping|error|done
function statelist() {
	state=$1
	(grep $state $statedir/sd? | cut -d: -f1) 2>/dev/null
}

function blink() {
	wipers=$(wiperlist)
	[[ "$wipers" =~ ^$dev ]] || return
	ledtrigger none

	# Get a list of processes of different states
	wiping=$(statelist wiping)
	error=$(statelist error)
	done=$(statelist done)

	# Blink number of wiping processes
	for i in $wiping; do
		pulse 0.1
		sleep 0.4
	done

	# Sleep if needed between blinks
	[ "$wiping$error" ] && sleep 1

	# Blink number of error processes
	for i in $error; do
		pulse 0.03 15
		sleep 0.4
	done

	# Sleep if needed between blinks
	[ "$error$done" ] && sleep 1

	# Blink number of done processes
	for i in $done; do
		pulse 1
		sleep 0.4
	done

	# Sleep after the blinks
	sleep 1
}

#Speed log tends to grow. Don't let it get over 10M
function truncate_logfiles() {
	wipers=$(wiperlist)
	[[ "$wipers" =~ ^$dev ]] || return
	
	[ "$(stat --printf="%s" "$LOGFILE")"       -gt $MAX_LOGFILE_SIZE ] && echo "$(date) :: Size was over $MAX_LOGFILE_SIZE. Truncating." > "$LOGFILE"
	[ "$(stat --printf="%s" "$SPEED_LOGFILE")" -gt $MAX_LOGFILE_SIZE ] && echo "$(date) :: Size was over $MAX_LOGFILE_SIZE. Truncating." > "$SPEED_LOGFILE"
}

# Sanity check that is called before each major step to ensure the disk is still there.
function check() {
	if [ ! -b "$disk" ] || [[ ! "$(sudo blockdev --getsize64 $disk 2>/dev/null)" =~ ^[0-9]+$ ]]; then
		log "Disk disappeared prematurely! Aborting!"
		exit 1
	fi
}

# Blink process status until disk removed
function waitblink() {
	while [ -b "$disk" ]; do
		blink
	done
}

# Cleanup mountpoint and statefile
function cleanup() {
	umount $mntpath &>/dev/null
	rmdir -r $mntpath &>/dev/null
	rm $statefile
}

# If the disk is removed before we're done, systemd will kill us. Catch that signal and do some cleanup.
function interrupted() {
	if [ "$state" == "done" ]; then
		log "Wiped disk removed. Cleaning up and exiting."
	else
		log "Ooopsies! Looks like our device disappeared before we were done. Systemd is killing us. Cleaning up and exiting."
	fi
	cleanup
	exit
}

# Catch the INT and TERM signals
trap interrupted INT TERM

log "Disk Inserted."
if [[ ! "$disk" =~ \/dev\/sd[a-z]$ ]]; then
	log "Disk $disk does not match the required pattern /dev/sd*. Ignoring!"
	exit 1
fi

if [[ ! "$(sudo blockdev --getsize64 $disk 2>/dev/null)" =~ ^[0-9]+$ ]]; then
	log "Disk does not have a valid size. Ignoring!"
	exit 1
fi

log "Disk matches pattern /dev/sd*. Wiping!"

# Check if the disk is still there
check

### Select wipe strategy ###
(
# man shred for more options
#shred -v --iterations=1 "$disk" 2>&1 | inlog

# Faster than shred. You need to have pv installed for this
#openssl enc -aes128 -k "$RANDOM$RANDOM$RANDOM" < /dev/zero | pv -fterab 2>&1 > "$disk" | stdbuf -oL tr '\r' '\n' | inlog

# Faster than shred. No pv required but no progress is logged.
#openssl enc -aes128 -k "$RANDOM$RANDOM$RANDOM" < /dev/zero > "$disk"

# dd + pv
dd if=/dev/zero bs=1M | pv -fterab 2>&1 > "$disk" | stdbuf -oL tr '\r' '\n' | inlog

# dd + status=progress
#dd if=/dev/zero of="$disk" bs=1M status=progress 2>&1 | stdbuf -oL tr '\r' '\n' | inlog
) &

### End wipe strategies ###

# Capture the wiper PID
PID=$!

setstate wiping
# Blink the LEDs while the wiper is running
while kill -0 "$PID" >/dev/null 2>&1; do
	blink
	truncate_logfiles
done

# Create a partition table on the disk with one partition filling the disk.
#log "Wiping Complete. Partitioning."
#(
#echo o # Create a new empty DOS partition table
#echo n # Add a new partition
#echo p # Primary partition
#echo 1 # Partition number
#echo   # First sector (Accept default: 1)
#echo   # Last sector (Accept default: varies)
#echo w # Write changes
#) | fdisk $disk

# Check if the disk is still there
#check

# Format the created partition
#log "Partitioning complete. Formatting."
#mkfs.vfat -F 32 ${disk}1
#mkfs.ntfs -F ${disk}1
#mkfs.ext3 -F ${disk}1
#mkfs.xfs -F ${disk}1

# Check if the disk is still there
#check

#log "Formatting complete. Timestamping."

# Mount the partition
#mkdir $mntpath
#mount ${disk}1 $mntpath

# Check if the disk is still there
#check

# Create a timestamp file
#touch  $mntpath/$(date +"%Y-%m-%d--%H-%M-%S")

# Unmount and cleanup mount point
#umount $mntpath
#rm -r $mntpath

log "Done in $SECONDS seconds!"
setstate done

# Wait for the disk to be unplugged and blink status
waitblink
cleanup
