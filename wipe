#!/bin/bash

LOGFILE="/tmp/wipe.log"

disk="/dev/$1"
mntpath="/mnt/$(basename "$disk")1"
statefile="/tmp/$1"

DEBUG=1		# Debug enabled
#DEBUG=		# Debug disabled

if [ "$DEBUG" ]; then
#	exec >> $LOGFILE		# This causes all stdout of the script to be sent to the logfile
	exec 2>&1
fi

function led() {
	# State can be: timer oneshot heartbeat backlight gpio cpu0 cpu1 cpu2 cpu3 default-on input panic mmc0
	#Default led0 (Status) trigger: mmc0
	#Default led1  (Power) trigger: input
	led=$1
	state=$2
	echo $state > /sys/class/leds/led$led/trigger
}

function setstate() {
	state=$1
	[ "$state" == "wiping" ] && (rm $statefile.*; touch "$statefile.wipingstate") 2> /dev/null
	[ "$state" == "done" ] && rm $statefile.* 2>/dev/null
	[ "$state" == "error" ] && (rm $statefile.*; touch "$statefile.errorstate") 2>/dev/null
}

function led_wiping() {
	setstate wiping
	led 0 heartbeat
	led 1 heartbeat
}

function led_done() {
	setstate done
	if [ "$(ls /tmp/*state | wc -l)" -ne 0 ]; then
		return
	fi
	led 0 mmc0
	led 1 input
}

function led_error() {
	setstate error
	led 0 none
	led 1 timer
}

function log() {
	[ "$DEBUG" ] && echo $(date) :: $disk :: $* >> $LOGFILE
}

function inlog() {
	while read -r line; do 
		[ "$DEBUG" ] && log "$line";
	done
}

function check() {
	if [ ! -b "$disk" ] || [[ ! "$(sudo blockdev --getsize64 $disk 2>/dev/null)" =~ ^[0-9]+$ ]]; then
		log "Disk disappeared prematurely! Aborting!"
		exit 1
	fi
}

interrupted() {
	log "Ooopsies! Looks like our device disappeared. Systemd is killing us. Cleaning up and exiting."
	umount $mntpath &>/dev/null
	rmdir -rf $mntpath &>/dev/null
	led_error
	exit 1
}

trap interrupted INT TERM

log "Disk Inserted."
[[ "$disk" =~ \/dev\/sd[a-z]$ ]] || exit 1

if [ ! -b "$disk" ]; then
	log "Disk does not match the required pattern /dev/sd*. Ignoring!"
	exit 1
fi

if [[ ! "$(sudo blockdev --getsize64 $disk 2>/dev/null)" =~ ^[0-9]+$ ]]; then
	log "Disk does not have a valid size. Ignoring!"
	exit 1
fi
# Export log function so it can be used with xargs

log "Disk matches pattern /dev/sd*. Wiping!"

check

led_wiping

# Select wipe strategy
#shred -v --iterations=1 "$disk"	2>&1 #| inlog															# man shred for more options
openssl enc -aes128 -k "wiper" < /dev/zero | pv -ftrb 2>&1 > "$disk" | stdbuf -oL tr '\r' '\n' | inlog		# Faster than shred. You need to have pv installed for this
#openssl enc -aes128 -k "wiper" < /dev/zero > "$disk"														# Faster than shred. No pv required but no progress is logged.

log "Wiping Complete. Partitioning."
(
echo o # Create a new empty DOS partition table
echo n # Add a new partition
echo p # Primary partition
echo 1 # Partition number
echo   # First sector (Accept default: 1)
echo   # Last sector (Accept default: varies)
echo w # Write changes
) | fdisk $disk

check

log "Partitioning complete. Formatting."
mkfs.vfat -F 32 ${disk}1
#mkfs.ntfs -F ${disk}1
#mkfs.ext3 -F ${disk}1
#mkfs.xfs -F ${disk}1

check

log "Formatting complete. Timestamping."
mkdir $mntpath
mount ${disk}1 $mntpath

check

touch  $mntpath/$(date +"%Y-%m-%d--%H-%M-%S")
umount $mntpath
rm -rf $mntpath

led_done

log "Done in $SECONDS seconds!"
